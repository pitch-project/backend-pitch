services:
  user-service:
    build: ./user-service
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: ${POSTGRES_URL}?currentSchema=USER
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      - postgres-db
    networks:
      - app-network

  #customer-service:
    #build: ./customer-service
    #ports:
      #- "8081:8081"
    #networks:
      #- app-network

  #payment-service:
    #build: ./payment-service
    #ports:
      #- "8082:8082"
    #networks:
      #- app-network

  #audit-service:
    #build: ./audit-service
    #ports:
      #- "8083:8083"
    #networks:
      #- app-network
  postgres-db:
    image: postgres:17.5-bookworm
    container_name: postgres-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data}
      - ./db_init:/docker-entrypoint-initdb.d
    networks:
      - app-network

  #mongo-db:
    #image: mongo:8.0.11-noble
    #container_name: mongo-db
    #environment:
      #MONGO_INITDB_ROOT_USERNAME: ${MONGO_DB_USERNAME}
      #MONGO_INITDB_ROOT_PASSWORD: rootpassword || ${MONGO_DB_PASSWORD}
      #MONGO_INITDB_DATABASE: audit_db || ${MONGO_DB_DATABASE}
    #ports:
      #- "27017:27017"
    #volumes:
      #- mongo_data:/data/db
    #networks:
      #- app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data: # Volumen con nombre para PostgreSQL
  mongo_data:    # Volumen con nombre para MongoDB
  # redis_data:    # Volumen con nombre para Redis (comentado)